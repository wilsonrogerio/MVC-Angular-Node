// *** Todos os Metodos e Verificacoes referente ao Usuario *** //
const bcrypt = require('bcrypt'); // Importa a biblioteca para criptografia de senhas
const User = require('../model/User'); // Importa o modelo de usu√°rio
const jwt = require('jsonwebtoken'); // Importa o jwt


//Funcoes Vindas dos Utils | Helpers
const createUserToken = require('../utils/create-user-token'); // Importa a funcao que cria um token
const getToken = require('../utils/get-token'); // Importa funcao de verificar o token
const getUserByToken = require('../utils/get-user-by-token');

module.exports = class UserController {
    //Registra o usuario
    static async Register(req, res) {
        // Mapeando os campos obrigat√≥rios com suas respectivas mensagens de erro
        const camposObrigatorios = {
            name: "Nome √© obrigat√≥rio",
            email: "Email √© obrigat√≥rio",
            phone: "Telefone √© obrigat√≥rio",
            password: "Senha √© obrigat√≥ria",
            confirmPassword: "Confirma√ß√£o de senha √© obrigat√≥ria"
        };

        // Verificando se algum campo obrigat√≥rio est√° faltando na requisi√ß√£o
        for (const campo in camposObrigatorios) {
            if (!req.body[campo]) {
                return res.status(422).json({ message: camposObrigatorios[campo] });
            }
        }

        // Extraindo dados do corpo da requisi√ß√£o para facilitar o uso
        const { name, phone, password, confirmPassword, email } = req.body;

        // Validando se a senha e a confirma√ß√£o de senha s√£o iguais
        if (password !== confirmPassword) {
            return res.status(422).json({ message: "As senhas precisam ser iguais" });
        }

        try {
            // Verifica se j√° existe um usu√°rio cadastrado com o email fornecido
            const usuarioExiste = await User.findOne({ email });
            if (usuarioExiste) {
                return res.status(422).json({ message: "Este email j√° est√° sendo utilizado" });
            }

            // Gera um "salt" para aumentar a seguran√ßa da criptografia da senha
            const salt = await bcrypt.genSalt(8);
            const passwordHash = await bcrypt.hash(password, salt); // Criptografa a senha

            // Cria um novo usu√°rio com os dados fornecidos
            const user = new User({
                name,
                email,
                phone,
                password: passwordHash // Armazena a senha j√° criptografada
            });

            // Salva o usu√°rio no banco de dados
            const newUser = await user.save();

            // Gera um token JWT para o usu√°rio rec√©m-cadastrado e retorna a resposta
            createUserToken(newUser, req, res);

        } catch (error) {
            // Captura erros que possam ocorrer durante o cadastro e retorna uma mensagem ao cliente
            return res.status(500).json({ message: "Erro ao cadastrar usu√°rio: " + error.message });
        }
    };
    //Loga o usuaruio no sistema
    static async login(req, res) {
        // Extraindo email e senha do corpo da requisi√ß√£o
        const { email, password } = req.body;

        // Verifica se o email foi fornecido
        if (!email) {
            return res.status(422).json({ message: "Email √© obrigat√≥rio" }); // Retorna erro caso esteja ausente
        }

        // Verifica se a senha foi fornecida
        if (!password) {
            return res.status(422).json({ message: "Senha √© obrigat√≥ria" }); // Retorna erro caso esteja ausente
        }

        try {
            // Busca o usu√°rio no banco de dados pelo email fornecido
            const usuario = await User.findOne({ email });

            // Se o usu√°rio n√£o existir, retorna um erro
            if (!usuario) {
                return res.status(422).json({ message: "N√£o h√° usu√°rio cadastrado com esse email" });
            }

            // Verifica se a senha fornecida corresponde √† senha armazenada no banco
            const checkPassword = await bcrypt.compare(password, usuario.password);

            // Se a senha estiver incorreta, retorna um erro
            if (!checkPassword) {
                return res.status(422).json({ message: "A senha n√£o confere" });
            }

            // Se todas as verifica√ß√µes forem bem-sucedidas, gera um token JWT para autentica√ß√£o
            createUserToken(usuario, req, res);

        } catch (error) {
            // Se ocorrer algum erro inesperado, retorna uma mensagem de erro interna
            return res.status(500).json({ message: "Erro ao processar login: " + error.message });
        }
    }
    // Checa se o usuario esta logado e se possui o token de verificacao
    static async checkUser(req, res) {
        let currentUser = null;
        // Verifica se h√° um cabe√ßalho de autoriza√ß√£o na requisi√ß√£o
        if (req.headers.authorization) {
            try {
                // Obt√©m o token do cabe√ßalho da requisi√ß√£o
                const token = getToken(req);

                // Decodifica o token usando a chave secreta
                const decoded = jwt.verify(token, "secretkey");

                // Busca o usu√°rio no banco de dados usando o ID contido no token
                currentUser = await User.findById(decoded.id);

                // Se o usu√°rio n√£o for encontrado, retorna um erro 404 (Usu√°rio n√£o encontrado)
                if (!currentUser) {
                    return res.status(404).json({ message: "Usu√°rio n√£o encontrado" });
                }

                // Remove a senha do objeto do usu√°rio antes de envi√°-lo na resposta
                currentUser.password = undefined;

            } catch (error) {
                // Em caso de erro na autentica√ß√£o (token inv√°lido, expirado, etc.), retorna um erro 401
                return res.status(401).json({ message: "Erro na autentica√ß√£o", error: error.message });
            }
        }

        // Se n√£o houver um token na requisi√ß√£o, significa que o usu√°rio n√£o est√° autenticado
        if (!currentUser) {
            return res.status(403).json({ message: "Usu√°rio n√£o autenticado" });
        }

        // Retorna os dados do usu√°rio autenticado com status 200
        return res.status(200).json(currentUser);
    }
    // Resgata usuario pelo id
    static async getUserById(req, res) {
        try {
            // Extraio o Id vindo da requisi√ß√£o
            const id = req.params.id;

            // Busco o usu√°rio no banco de forma ass√≠ncrona
            const user = await User.findById(id).select('-password'); // Select serve para remover um trecho expecifico do retorno

            // Verifico se o usu√°rio existe
            if (!user) {
                return res.status(422).json({ message: "Usu√°rio n√£o encontrado" });
            }

            // Retorno o usu√°rio encontrado
            return res.status(200).json({ user });

        } catch (error) {
            // Capturo poss√≠veis erros e retorno uma resposta adequada
            return res.status(500).json({ message: "Erro ao buscar usu√°rio", error: error.message });
        }
    }

    // Alteracao de Usuario
static async editUser(req, res) {
    try {
        // üîê Obt√©m o token e verifica o usu√°rio autenticado
        const token = getToken(req);
        const user = await getUserByToken(token);

        // üîç Verifica se o usu√°rio foi encontrado no sistema
        if (!user) {
            return res.status(401).json({ message: "Acesso negado: Usu√°rio n√£o autenticado" });
        }

        // ‚úçÔ∏è Extraio as informa√ß√µes enviadas pelo usu√°rio na requisi√ß√£o
        const { name, phone, password, confirmPassword, email } = req.body;

        // üñºÔ∏è Atualiza a imagem do usu√°rio caso tenha sido enviada
        if (req.file) {
            user.imagem = req.file.filename; // Salva o nome do arquivo da imagem
        }

        // ‚úÖ Valida se os campos obrigat√≥rios foram preenchidos
        if (!name) {
            return res.status(400).json({ message: "Nome √© obrigat√≥rio" });
        }
        user.name = name;

        if (!phone) {
            return res.status(400).json({ message: "Telefone √© obrigat√≥rio" });
        }
        user.phone = phone;

        if (!email) {
            return res.status(400).json({ message: "Email √© obrigat√≥rio" });
        }

        // üîé Verifica se o e-mail j√° est√° registrado por outro usu√°rio
        const userExist = await User.findOne({ email });
        if (userExist && user.email !== email) {
            return res.status(422).json({ message: "Email j√° est√° em uso por outro usu√°rio" });
        }
        user.email = email;

        // üîí Valida√ß√£o de senha (caso tenha sido enviada)
        if (password || confirmPassword) {
            if (!password || !confirmPassword) {
                return res.status(400).json({ message: "Ambos os campos de senha devem ser preenchidos" });
            }
            if (password !== confirmPassword) {
                return res.status(400).json({ message: "As senhas n√£o coincidem" });
            }

            // üîë Criptografa a nova senha antes de salvar
            const salt = await bcrypt.genSalt(8);
            user.password = await bcrypt.hash(password, salt);
        }

        // üõ†Ô∏è Atualiza os dados do usu√°rio no banco de dados
        await User.findByIdAndUpdate(
            user._id,
            { $set: { name, phone, email, password: user.password, imagem: user.imagem } },
            { new: true }
        );

        // ‚úÖ Retorna uma mensagem de sucesso
        return res.status(200).json({ message: "Usu√°rio atualizado com sucesso", user });

    } catch (error) {
        // ‚ö†Ô∏è Captura e retorna erros internos da aplica√ß√£o
        return res.status(500).json({ message: "Erro ao atualizar usu√°rio", error: error.message });
    }
}


};
